<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.icent.isaver.admin.dao.CriticalDao">

    <resultMap id="criticalResultMap" type="CriticalBean">
        <id property="criticalId" column="criticalId"/>
        <result property="criticalLevel" column="criticalLevel"/>
        <result property="criticalValue" column="criticalValue"/>
        <result property="dashboardFileId" column="dashboardFileId"/>
        <collection property="criticalDetects" ofType="CriticalDetectBean">
            <id property="criticalDetectId" column="criticalDetectId"/>
            <result property="criticalId" column="detect_criticalId"/>
            <result property="detectDeviceId" column="detectDeviceId"/>
            <result property="fenceId" column="fenceId"/>
            <result property="useYn" column="detectUseYn"/>
            <collection property="criticalDetectConfigs" ofType="CriticalDetectConfigBean">
                <id property="criticalDetectConfigId" column="criticalDetectConfigId"/>
                <result property="criticalDetectId" column="config_criticalDetectId"/>
                <result property="startDatetime" column="startDatetime"/>
                <result property="endDatetime" column="endDatetime"/>
                <result property="useYn" column="configUseYn"/>
            </collection>
            <collection property="criticalTargets" ofType="CriticalTargetBean">
                <id property="targetDeviceId" column="targetDeviceId"/>
                <id property="criticalDetectId" column="target_criticalDetectId"/>
                <result property="alarmType" column="alarmType"/>
                <result property="alarmMessage" column="alarmMessage"/>
                <result property="alarmFileId" column="alarmFileId"/>
                <result property="useYn" column="targetUseYn"/>
            </collection>
        </collection>
    </resultMap>

    <!--
        임계치 목록을 가져온다.
        @author psb
    -->
    <select id="findListCritical" resultMap="criticalResultMap" parameterType="map">
        SELECT  critical.critical_id as criticalId
                , critical.critical_level as criticalLevel
                , critical.critical_value as criticalValue
                , critical.dashboard_file_id as dashboardFileId
                , detect.critical_detect_id as criticalDetectId
                , detect.critical_id as detect_criticalId
                , detect.detect_device_id as detectDeviceId
                , detect.fence_id as fenceId
                , detect.use_yn as detectUseYn
                , target.target_device_id as targetDeviceId
                , target.critical_detect_id as target_criticalDetectId
                , target.alarm_type as alarmType
                , target.alarm_message as alarmMessage
                , target.alarm_file_id as alarmFileId
                , target.use_yn as targetUseYn
                , detect_config.critical_detect_config_id as criticalDetectConfigId
                , detect_config.critical_detect_id as config_criticalDetectId
                , detect_config.start_datetime as startDatetime
                , detect_config.end_datetime as endDatetime
                , detect_config.use_yn as configUseYn
        FROM	isaver.critical critical
        LEFT OUTER JOIN isaver.critical_detect detect
        ON	critical.critical_id = detect.critical_id
        LEFT OUTER JOIN isaver.critical_target target
        ON	detect.critical_detect_id = target.critical_detect_id
        LEFT OUTER JOIN isaver.critical_detect_config detect_config
        ON	detect.critical_detect_id = detect_config.critical_detect_id
        WHERE critical.event_id = #{eventId}
        ORDER BY critical.critical_level
    </select>

    <!--
        임계치를 저장한다
        @author psb
    -->
    <insert id="saveCritical" parameterType="java.util.List" >
        <foreach collection="list" item="critical">
            INSERT INTO isaver.critical (
                critical_id
                , event_id
                , critical_level
                <if test="critical.criticalValue != null and critical.criticalValue != ''">
                    , critical_value
                </if>
                , dashboard_file_id
            ) VALUES (
                #{critical.criticalId}
                , #{critical.eventId}
                , #{critical.criticalLevel}
                <if test="critical.criticalValue != null and critical.criticalValue != ''">
                    , ${critical.criticalValue}
                </if>
                , #{critical.dashboardFileId}
            );
            <foreach collection="critical.criticalDetects" item="detect">
                INSERT INTO isaver.critical_detect (
                    critical_detect_id
                    , critical_id
                    , detect_device_id
                    , use_yn
                    <if test="detect.fenceId != null and detect.fenceId != ''">
                        , fence_id
                    </if>
                ) VALUES (
                    #{detect.criticalDetectId}
                    , #{detect.criticalId}
                    , #{detect.detectDeviceId}
                    , #{detect.useYn}
                    <if test="detect.fenceId != null and detect.fenceId != ''">
                        , #{detect.fenceId}
                    </if>
                );

                <foreach collection="detect.criticalDetectConfigs" item="config">
                    INSERT INTO isaver.critical_detect_config (
                        critical_detect_config_id
                        , critical_detect_id
                        , start_datetime
                        , end_datetime
                        , use_yn
                    ) VALUES (
                        #{config.criticalDetectConfigId}
                        , #{config.criticalDetectId}
                        , #{config.startDatetime}
                        , #{config.endDatetime}
                        , #{config.useYn}
                    );
                </foreach>

                <foreach collection="detect.criticalTargets" item="target">
                    INSERT INTO isaver.critical_target (
                        critical_detect_id
                        , target_device_id
                        , alarm_type
                        , alarm_message
                        , alarm_file_id
                        , use_yn
                    ) VALUES (
                        #{target.criticalDetectId}
                        , #{target.targetDeviceId}
                        , #{target.alarmType}
                        , #{target.alarmMessage}
                        , #{target.alarmFileId}
                        , #{target.useYn}
                    );
                </foreach>
            </foreach>
        </foreach>
    </insert>

    <!--
        임계치를  제거한다
        @author psb
    -->
    <delete id="removeCritical" parameterType="map">
        DELETE FROM isaver.critical_target
        WHERE critical_detect_id in (
          SELECT critical_detect_id
          FROM isaver.critical_detect
          WHERE critical_id in (SELECT critical_id FROM isaver.critical WHERE event_id = #{eventId})
        );

        DELETE FROM isaver.critical_detect_config
        WHERE critical_detect_id in (
          SELECT critical_detect_id
          FROM isaver.critical_detect
          WHERE critical_id in (SELECT critical_id FROM isaver.critical WHERE event_id = #{eventId})
        );

        DELETE FROM isaver.critical_detect
        WHERE critical_id in (SELECT critical_id FROM isaver.critical WHERE event_id = #{eventId});

        DELETE FROM isaver.critical WHERE event_id = #{eventId};
    </delete>
</mapper>